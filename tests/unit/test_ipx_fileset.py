import os
import tempfile
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../src/dv_flow/libsrc")))
from ipx_fileset import IPXFileSet

IPXACT_XML = '''<?xml version="1.0" encoding="UTF-8"?>
<ipxact:component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ipxact="http://www.accellera.org/XMLSchema/IPXACT/1685-2014">
  <ipxact:fileSets>
    <ipxact:fileSet>
      <ipxact:name>verilogSource</ipxact:name>
      <ipxact:file>
        <ipxact:name>memory_controller.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:description>Generated by test.</ipxact:description>
      </ipxact:file>
    </ipxact:fileSet>
    <ipxact:fileSet>
      <ipxact:name>docs</ipxact:name>
      <ipxact:file>
        <ipxact:name>readme.txt</ipxact:name>
        <ipxact:fileType>text</ipxact:fileType>
        <ipxact:description>Documentation file.</ipxact:description>
      </ipxact:file>
    </ipxact:fileSet>
  </ipxact:fileSets>
</ipxact:component>
'''

def test_ipx_fileset_extract():
    with tempfile.NamedTemporaryFile(delete=False, suffix=".xml") as tmp:
        tmp.write(IPXACT_XML.encode("utf-8"))
        tmp_path = tmp.name

    try:
        # Test extracting first fileset (no filesets param)
        ipx = IPXFileSet(tmp_path)
        result = ipx.run()
        assert len(result) == 1
        assert result[0]["name"] == "verilogSource"
        assert result[0]["files"][0]["name"] == "memory_controller.v"

        # Test extracting specific fileset
        ipx = IPXFileSet(tmp_path, filesets=["docs"])
        result = ipx.run()
        assert len(result) == 1
        assert result[0]["name"] == "docs"
        assert result[0]["files"][0]["name"] == "readme.txt"
    finally:
        os.remove(tmp_path)

import shutil
import pytest
from pytest_dfm import *

def test_ipx_fileset_dvflow(tmpdir, dvflow):
    # Copy the real IP-XACT file to tmpdir
    xml_src = os.path.join(os.path.dirname(__file__), "data", "memory_controller.1.0.xml")
    xml_dst = os.path.join(tmpdir, "memory_controller.1.0.xml")
    shutil.copyfile(xml_src, xml_dst)

    flow_dv = """
package:
  name: ipx_test

  tasks:
  - name: fileset
    uses: src.IPX-FileSet
    with:
      file: memory_controller.1.0.xml
"""

    with open(os.path.join(tmpdir, "flow.dv"), "w") as fp:
        fp.write(flow_dv)

    status, out = dvflow.runFlow(
        os.path.join(tmpdir, "flow.dv"),
        "ipx_test.fileset"
    )

    assert status == 0
    assert len(out.output) == 1
    # Should extract at least one fileset
    assert len(out.output[0].files) > 0
    # Check expected file name from XML
    assert "memory_controller.v" in out.output[0].files

def test_ipx_fileset_dvflow_specific(tmpdir, dvflow):
    # Copy the real IP-XACT file to tmpdir
    xml_src = os.path.join(os.path.dirname(__file__), "data", "memory_controller_with_docs.xml")
    xml_dst = os.path.join(tmpdir, "memory_controller_with_docs.xml")
    shutil.copyfile(xml_src, xml_dst)

    # Debug: print contents of XML file
    with open(xml_dst, "r") as fp:
        print("XML file contents for docs_fileset test:\n", fp.read())

    flow_dv = """
package:
  name: ipx_test

  tasks:
  - name: docs_fileset
    uses: src.IPX-FileSet
    with:
      file: memory_controller_with_docs.xml
      filesets:
        - docs
"""

    with open(os.path.join(tmpdir, "flow.dv"), "w") as fp:
        fp.write(flow_dv)

    status, out = dvflow.runFlow(
        os.path.join(tmpdir, "flow.dv"),
        "ipx_test.docs_fileset"
    )

    assert status == 0
    assert len(out.output) == 1
    # Should extract the docs fileset
    assert out.output[0].name == "docs"
    assert "readme.txt" in out.output[0].files
